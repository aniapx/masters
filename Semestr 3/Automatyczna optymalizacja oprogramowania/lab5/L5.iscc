##Znalezienie zaleznosci
P := parse_file "1-my.c";

print "Loop domain:";
Domain := P[0];
LD := Domain;
print Domain;

Write := P[1] * Domain;
Read := P[3] * Domain;
Schedule := P[4];
Before := Schedule << Schedule;
RaW := (Write . (Read^-1)) * Before;
WaW := (Write . (Write^-1)) * Before;
WaR := (Read . (Write^-1)) * Before;

R := (RaW+WaW+WaR);
print "R";
print R;

print "scan (R*[n]->{:n=6})";
scan (R*[n]->{:n=6});

##krok 2
IslSchedule := schedule LD respecting R minimizing R;
print "IslSchedule";
IslSchedule;  

##krok 3
SCHED:= map IslSchedule;
print "SCHED";
SCHED;


##krok 4 
## Zeby utworzyc szeregowanie pozwalajace na wave-fronting na poziomie iteracji
## sumujemy prawe strony obydwu szeregowan, czyli uzyskujemy: i+j #i w prawej krotce relacji SCHED zastepujemy pierwszy element (i) 
# przez i+j, w wyniku uzyskujemy relacje, ktorej intersekcja ze #zbiorem LD, daje relacje,  WAVE_FR, ktora implemenuje 
#wavefronting 


WAVE_FR:=[n] -> { [i, j] -> [i+j, j] }*LD;
print "WAVE_FR";
WAVE_FR;

##krok 5, kafelkowanie, generowanie kodu sekwencyjnego 
## najpierw tworzymy relacje korzystajac z obydwu szeregowan ISL
## uzyskanych w kroku 2

CODE_TILING:= [n]->{[i,j]->[it,jt, i,j]: 
## iteracje (i,j) naleza do przestrzeni iteracji LD:
 1 <= i <= n and 1 <= j <= n and 

## ograniczenia dla it  biorac pod uwage pierwsze ##szeregowanie  { [i, j] -> [(i)] } i rozmiar kafelka 2x2 
 1<= i-2it <=2 and

## ograniczenia dla jt  biorac pod uwage drugie  ##szeregowanie  { #[i, j] -> [(j)] } i rozmiar kafelka 2x2

1<= j-2jt <=2
} ;

print  "CODE_TILING";
CODE_TILING;

scan (CODE_TILING*[n]->{:n=4});


##krok 7 generowanie kodu sekwencyjnego
codegen CODE_TILING;

#### wygenerowany pseudo kod sekwencyjny:
#for (int c0 = 0; c0 < floord(n + 1, 2); c0 += 1)
#  for (int c1 = 0; c1 < (n + 1) / 2; c1 += 1)
#    for (int c2 = 2 * c0 + 1; c2 <= min(n, 2 * c0 + 2); c2 += 1)
#      for (int c3 = 2 * c1 + 1; c3 <= min(n, 2 * c1 + 2); c3 += #1)
#        (c2, c3);


##krok 9 tworzenie relacji pozwalajacej na implementacje wave-#fronting na poziomie kafelkow: 

CODE_TILING_PAR:= [n]->{[i,j]->[it',jt, i,j]: exists it: it'=it+jt and 
## iteracje (i,j) naleza do przestrzeni iteracji LD:
 1 <= i <= n and 1 <= j <= n and 

## ograniczenia dla it  biorac pod uwage pierwsze ##szeregowanie  ##{ [i, j] -> [(i)] } i rozmiar kafelka 2x2 
 1<= i-2it <=2 and

## ograniczenia dla jt  biorac pod uwage drugie  ##szeregowanie  { #[i, j] -> [(j)] } i rozmiar kafelka 2x2

1<= j-2jt <=2
} ;

print  "CODE_TILING_PAR";
CODE_TILING_PAR;

#krok 11 generowanie kodu rownoleglego
codegen CODE_TILING_PAR;

#### wygenerowany pseudo kod:
#for (int c0 = 0; c0 < n; c0 += 1)
#  for (int c1 = max(0, -n + c0 + n / 2 + 1); c1 <= min(c0, (n + #1) / 2 - 1); c1 += 1)
#    for (int c2 = 2 * c0 - 2 * c1 + 1; c2 <= min(n, 2 * c0 - 2 * #c1 + 2); c2 += 1)
#      for (int c3 = 2 * c1 + 1; c3 <= min(n, 2 * c1 + 2); c3 += #1)
#       (c2, c3);


### r�wnolegly kod kompilowalny

#for (int c0 = 0; c0 < n; c0 += 1)
# #pragma openmp parallel for 
#  for (int c1 = max(0, -n + c0 + n / 2 + 1); c1 <= min(c0, (n + #1) / 2 - 1); c1 += 1)
#    for (int c2 = 2 * c0 - 2 * c1 + 1; c2 <= min(n, 2 * c0 - 2 * #c1 + 2); c2 += 1)
#      for (int c3 = 2 * c1 + 1; c3 <= min(n, 2 * c1 + 2); c3 += #1)
#a[c2][c3] = a[c2][c3-1] + a[c2-1][c3] ;

##Uwaga!! druga petla jest  rownoleg�a   