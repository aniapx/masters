##Znalezienie zaleznosci
P := parse_file "1-my.c";

print "Loop domain:";
Domain := P[0];
LD := Domain;
print Domain;

Write := P[1] * Domain;
Read := P[3] * Domain;
Schedule := P[4];
Before := Schedule << Schedule;
RaW := (Write . (Read^-1)) * Before;
WaW := (Write . (Write^-1)) * Before;
WaR := (Read . (Write^-1)) * Before;

R := (RaW+WaW+WaR);
print "R";
print R;

print "scan (R*[n]->{:n=6})";
scan (R*[n]->{:n=6});

##krok 2
IslSchedule := schedule LD respecting R minimizing R;
print "IslSchedule";
IslSchedule;  

##krok 3
SCHED:= map IslSchedule;
print "SCHED";
SCHED;

##krok 4 
WAVE_FR:=[n] -> { S_0[i, j] -> [i+j, j] }*LD;
print "WAVE_FR";
WAVE_FR;

##krok 5, kafelkowanie, generowanie kodu sekwencyjnego 
CODE_TILING:= [n]->{
    [i,j]->[it, jt, i, j]: 
        1 <= i <= n and 2 <= j <= n and 
        1 <= i - 2it <= 2 and
        1 <= j - 2jt <= 2
};

print  "CODE_TILING";
CODE_TILING;

print "scan (CODE_TILING*[n]->{:n=4})";
scan (CODE_TILING*[n]->{:n=4});

##krok 7 generowanie kodu sekwencyjnego
print "codegen CODE_TILING";
codegen CODE_TILING;

##krok 9 tworzenie relacji pozwalajacej na implementacje wave-
#fronting na poziomie kafelkow: 
CODE_TILING_PAR:= [n]->{
    [i,j]->[it', jt, i, j]: exists it: 
        it'=it+jt and 
        1 <= i <= n and 1 <= j <= n and 
        1 <= i - 2it <= 2 and
        1 <= j - 2jt <= 2
};

print  "CODE_TILING_PAR";
CODE_TILING_PAR;

#krok 11 generowanie kodu rownoleglego
codegen CODE_TILING_PAR;
