##for(i=1; i<=n; i++)
## for(i=1; i<=n; i++)
##  a[i][j]=a[i][j-1];

##krok 1: relacja zaleznosci, R, oraz przestrzen iteracji,LD:

R:=[n]->{[i,j]->[i,j+1]: 1<=i<=n and 1<=j<=n-1 };

print "scan (R*[n]->{:n=3})";

scan (R*[n]->{:n=3});

LD:=[n]->{[i,j]: 1<=i,j<=n};

##uwaga: PET zazwyczaj produkuje krotki z nazwami, przykładowo S_0[i,j]
## w takim przypadku pierwsza krotka relacji CODE_SYNCH_FREE także powinna 
# być z nazwą czyli S_0[i,j]
## lub trzeba usunąć nazwę S_0 w krotce LD jeśli  krotki CODE_SYNCH_FREE są bez nazw


##krok 3: Tranzytywne domkniecie realacji R:

R_PLUS:=R^+;
print "R_PLUS";
R_PLUS; 

##krok 4: Obliczenie R^k:

Rk:=pow R;
print "Rk";
Rk;

###uzyskana relacje Rk o postaci
#([n] -> { [k] -> [[i, j] -> [i, k + j]] : k > 0 and 0 < i <= n and #j > 0 and 2 - k <= j <= n - k and j < n }, True)
#nalezy przekonwertowac recznie na relacje:

Rk:=[n,k] -> { [i, j] -> [i, k + j] : k > 0 and 0 < i <= n and j > 0 and 2 - k <= j <= n - k and j < n };

#krok 5: obliczenie zbioru UDS:

UDS:= domain R -range R;
print "UDS";
UDS; 

# krok 6: Obliczenie zbioru  S(k):= R^k(UDS)  -  (R^+ . R^k)(UDS)

Sk:=Rk(UDS) - (R_PLUS . Rk)(UDS);
print "Sk";
Sk;
## krok 7: Tworzenie relacji CODE w oparciu o zbior Sk 
##[n, k] -> { [i0, 1 + k] : 0 < k < n and 0 < i0 <= n }


## uwaga !!!! zeby uwzglednic punkty UDS dla danego przykładu 
# ograniczenie 0 < k < n konwertujemy na 0 <= k < n

CODE:=[n] ->  { [i0, k'] -> [k, i0, k+1]: k'=k+1 and  0 <= k < n and 0 < i0 <= n };
print "CODE";
CODE;
scan (CODE*[n]->{:n=3});

## w ogolnym przypadku, kiedy brak jest ograniczeń na "k", zeby relacja  CODE #uwzgledniala punkty UDS trzeba  
# do relacji CODE   dodac relacje  [n]-> {[punkt UDS]->[k=0,punkt UDS]: #ograniczenia UDS #and k=0};
 



##krok 8 generowanie pseudokodu  i kodu kompilowalnego

print "CODE";
codegen  CODE;

### w wyniku dostajemy pseudokod kod:

#for (int c0 = 0; c0 < n; c0 += 1)
#  for (int c1 = 1; c1 <= n; c1 += 1)
#    (c1, c0 + 1);

#ktory konwertujemy na kod kompilowalny

#for (int c0 = 0; c0 < n; c0 += 1)
# #pragma openmp parallel for
#  for (int c1 = 1; c1 <= n; c1 += 1)
#a[c1][c0+1]=a[c1][c0];

##krok 9 obliczenie zbioru IND
IND:= LD - (domain R +  range R);
print "IND";
IND;

##zbior  IND jest pusty, czyli nie trzeba generowac kodu #przebierajacego elementy zbioru IND

## w przypadku, gdy zbior IND nie jest pusty, zalozmy

IND:=[n]->{[i,j]: 1<=i=2 and 3<=j=6};

## to tworzymy relacje, CODE_IND:

CODE_IND:= [n]->{[i,j]->[i,j]: 1<=i=2 and 3<=j<=6};

## i korzystamy z operatora codegen
print "CODE for IND";
codegen CODE_IND;

### w wyniku uzyskujemy pseudo kod

#for (int c1 = 3; c1 <= 6; c1 += 1)
#  (2, c1);

##który trzeba przekonwertowć na kod kompilowalny

#Kod docelowy jest to kod uzyskany w kroku 8 oraz kroku 9.