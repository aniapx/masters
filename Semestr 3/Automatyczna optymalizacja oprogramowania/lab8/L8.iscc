##krok 1: relacja zaleznosci, R, oraz przestrzen iteracji,LD:
LD := [n] -> { [i, j] : 0 < i <= n and 3 <= j <= n }
print "LD"; LD;

### relacja zaleznosci
R := [n] -> { [i, j] -> [i' = i, j' = 3 + j] : 0 < i <= n and 3 <= j <= -3 + n };
print "R"; R; 

#Tworzenie zbioru TILE:
## szerokosc kafelka = 2 
TILE:=[n, it, jt]->{
    [i,j]: 
        2it + 1 <= i <= min(2 * (it + 1), n) and 
        2jt + 1 <= j <= min(2 * (jt + 1), n) and 
        it,jt >= 0
};
print "TILE"; TILE;

#TILE_LT obliczamy nastepujaco:
TILE_LT:=[n, it, jt]->{[i, j]: exists it',jt': (it' < it or it' = it and jt' < jt)
    and 2it' + 1 <= i <= min(2 * (it' + 1), n) 
    and 2jt' + 1 <= j <= min(2 * (jt' + 1), n) 
    and it, it', jt, jt' >= 0
};
print "TILE_LT"; TILE_LT;

#TILE_GT obliczamy nastepujaco:
TILE_GT:=[n,it,jt]->{[i, j]: exists it', jt': (it' > it or it' = it and jt' > jt)
    and 2it' + 1 <= i <= min(2 * (it' + 1),n) 
    and 2jt' + 1 <= j <= min(2*(jt' + 1),n) 
    and it, it', jt, jt' >= 0
};
print "TILE_GT"; TILE_GT;

##obliczenie relacji R+
RPLUS:=R^+;
print "RPLUS"; RPLUS;

##Obliczenie zbioru TILE_ITR
TILE_ITR:= TILE  - RPLUS(TILE_GT);
print "TILE_ITR"; TILE_ITR;

##obliczenie zbioru TVLD_LT
TVLD_LT:= (RPLUS (TILE_ITR) * TILE_LT) -RPLUS(TILE_GT);
print "TVLD_LT"; TVLD_LT;

##obliczenie zbioru TILE_VLD
TILE_VLD:= TILE_ITR  +  TVLD_LT;
print "TILE_VLD"; TILE_VLD;

##celem sprawdzenia zawartosci kafelkow mozemy skorzystac z #operatora scan:
#print "scan (TILE_VLD*[n]->{:n=6})";
scan (TILE_VLD*[n]->{:n=9});
print "-----------------------------";

##tworzenie zbioru TILE_VLD_EXT
# parametry it,jt trzeba przenisc na pierwsze pozycje kazdej krotki zbioru TILE_VLD:

TILE_VLD_EXT:=[n] -> {
    [it, jt, i, j] :
        it >= 0 and
        2it <= -2 + n and
        jt >= 0 and
        2jt <= -2 + n and
        2it < i <= 2 + 2it and
        2jt < j <= 2 + 2jt;

    [it, jt, i, j = n] :
        2jt = -1 + n and
        it >= 0 and
        2it <= -2 + n and
        2it < i <= 2 + 2it;

    [it, jt, i = n, j] :
        2it = -1 + n and
        jt >= 0 and
        2jt <= -2 + n and
        2jt < j <= 2 + 2jt;

    [it, jt, i = n, j = n] :
        2it = -1 + n and
        2jt = -1 + n and
        n > 0;
};


##konwertujemy zbior TILE_VLD_EXT na relacje CODE"

# CODE:=identity (TILE_VLD_EXT * [n]->{:n=6});
CODE:=identity TILE_VLD_EXT;
codegen CODE;