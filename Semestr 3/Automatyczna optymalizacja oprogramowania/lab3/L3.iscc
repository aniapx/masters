#krok 1
#relacja zaleznosci
#R:=[n]-> {[i, j] -> [i, j+1] : 1 <= i <= n and 1 <= j < n};
P := parse_file "1-my.c";

R:=[n]-> { [i, j] -> [i1] : 0 < i <= n and 2 <= j <= n and i1 > i and 0 < i1 <= n; [i, j] -> [i1, j1] : 0 < i <= n and 2 <= j <= n and i1 > i and 0 < i1 <= n and 2 <= j1 <= n; [i, j] -> [i1 = i, j1] : 0 < i <= n and 2 <= j <= n and j1 > j and 2 <= j1 <= n; [i] -> [i1] : 0 < i <= n and i1 > i and 0 < i1 <= n; [] -> [i] : 0 < i <= n; [i, j] -> [i1 = i, j1 = 2 + j] : 0 < i < n and 2 <= j <= -2 + n; [i] -> [i1, j] : 0 < i <= n and i1 > i and 0 < i1 <= n and 2 <= j <= n; [i] -> [i1 = i, j] : 0 < i <= n and 2 <= j <= n; [i] -> [i1] : 0 < i <= n and i1 > i and 0 < i1 <= n };
print "R";
R;

LD:=[n] -> { [i, j] : 0 < i <= n and 2 <= j <= n; []; [i] : 0 < i <= n; [i] : 0 < i <= n; [i, j] : 0 < i <= n and 2 <= j <= n };
print "LD";
LD;

print "scan (R*[n]->{:n=6})";
scan (R*[n]->{:n=6});

##krok 2
IslSchedule := schedule LD respecting R minimizing R;
print "IslSchedule";
IslSchedule;

##krok 3
SCHED:=map IslSchedule;
print "SCHED";
SCHED;

## krok 4
## obliczamy wektory dystansu:
D:=deltas R;
print "D";
D;

CHECK1:=[n]-> {[I]: I=1*0 + 0*2 };
print "CHECK1";
CHECK1;  

CODE_SYNCH_FREE:=[n] -> { [i, j] -> [p,i,j] : p=i }*LD;

#krok 5
print "scan (CODE_SYNCH_FREE* [n]->{:n=6})";
scan (CODE_SYNCH_FREE* [n]->{:n=6});
print "CODE_SYNCH_FREE";
CODE_SYNCH_FREE;

#krok 6
##generujemy pseudokod
codegen CODE_SYNCH_FREE;
