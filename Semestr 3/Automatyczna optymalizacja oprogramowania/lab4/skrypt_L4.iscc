##Znalezienie zaleznosci
P := parse_file "1-my.c";

print "Loop domain:";
Domain := P[0];
LD := Domain;
print Domain;

Write := P[1] * Domain;
Read := P[3] * Domain;
Schedule := P[4];
Before := Schedule << Schedule;
RaW := (Write . (Read^-1)) * Before;
WaW := (Write . (Write^-1)) * Before;
WaR := (Read . (Write^-1)) * Before;

R := (RaW+WaW+WaR);
print "R";
print R;

print "scan (R*[n]->{:n=6})";
scan (R*[n]->{:n=6});

##krok 2
IslSchedule := schedule LD respecting R minimizing R;
print "IslSchedule";
IslSchedule;  

##krok 3
SCHED:= map IslSchedule;
print "SCHED";
SCHED;

##krok 4
## Zeby utworzyc szeregowanie pozwalajace na wave-fronting
## sumujemy prawe strony obydwu szeregowan, czyli uzyskujemy: i+j, 
# w prawej krotce relacji SCHED zastepujemy pierwszy element (i) 
# przez i+j, w wyniku uzyskujemy relacje, ktorej intersekcja ze
#zbiorem LD, daje relacje,  WAVE_FR, ktora implemenuje 
#wavefronting 


WAVE_FR:=[n] -> { [i, j] -> [t=i+j] }*LD;
print "WAVE_FR";
WAVE_FR;

#### t okre�la czas szeregowania iteracji (i,j)

 
#krok 5 

print "scan (WAVE_FR*[n]->{:n=6})";

scan (WAVE_FR*[n]->{:n=6});

##krok 6 wygenerowanie pseudokodu

## celem wygenerowania  pseudokodu korzystamy z relacji 
## WAVE_FR:=[n] -> { [i, j] -> [i + j]  }*LD i rozszerzamy prawa krotke #elementami i,j na jej  koncu;
 #w wyniku uzyskujemy relacje


CODE:= [n] -> { [i, j] -> [i + j, i,j] : 0 < i <= n and 0 < j <= n };
print "CODE";
CODE;

scan (CODE*[n]->{:n=2});

## do relacji CODE stosujemy operator codegen:

codegen CODE;


### w wyniku uzyskujemy kod nizej

#for (int c0 = 2; c0 <= 2 * n; c0 += 1)
#  for (int c1 = max(1, -n + c0); c1 <= min(n, c0 - 1); c1 += 1)
#    (c0 - c1, c1);

#ktory konwertujemy na kod kompilowalny

#for (int c0 = 2; c0 <= 2 * n; c0 += 1)
# #pragma openmp parallel for
#  for (int c1 = max(1, -n + c0); c1 <= min(n, c0 - 1); c1 += 1)
#    
# a[c0 - c1][c1] = a[c0 - c1][c1-1] + a[co-c1-1][c1] ;


## krok 8 

##tworzymy relacje do wygenerowania petli calkowicie wymiennej
## w tym celu korzystamy z szeregowania uzyskanego w kroku 2:
# ## schedule: "[n] -> [{ [i, j] -> [(i)] }, { [i, j] -> [(j)] }]",
## czyli szeregowanie C pozwalaj�ce na wygenerowanie petli calkowiciew wymiennej jest 
## nastepujace  C=(i,j)
## tworzymy relacje  FULL_PERM:= [n]->{[I]->[C]}; gdzie I=(i,j), C=(i,j)



FULL_PERM:= [n]-> {[i,j]->[i,j]}*LD;

## generujemy pseudokod 
print "codegen FULL_PERM";
codegen FULL_PERM;


## wygenerowany pseudokod

## for (int c0 = 1; c0 <= n; c0 += 1)
##   for (int c1 = 1; c1 <= n; c1 += 1)
##     (c0, c1);


##kroki 9 i 10 zrealizowa� samodzielnie